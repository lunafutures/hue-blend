{{ if .Values.tags.hue }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hue-express
  namespace: {{ .Values.namespaces.hue }}
  labels:
    app: hue-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hue-express
  template:
    metadata:
      labels:
        app: hue-express
    spec:
      containers:
        - name: hue-express-container
          image: {{ tpl .Values.hosts.registry . }}/hue-express:arm-latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: rocket-port
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: {{ .Values.livenessProbePeriodSeconds.hue }}
          envFrom:
            - secretRef:
                name: hue-express-secret
          env:
            - name: EXPRESS_PORT
              value: "3000"
            - name: HUE_BRIDGE_CACERT_PEM_PATH
              value: /data/huebridge_cacert.pem
          volumeMounts:
            - name: hue-express-huebridge-cacert
              mountPath: /data/
          resources:
            {{- .Values.imageResources.hueExpress | toYaml | nindent 12 }}
      volumes:
        - name: hue-express-huebridge-cacert
          secret:
            secretName: hue-express-huebridge-cacert
      imagePullSecrets:
        - name: image-pull-secret
---
apiVersion: v1
kind: Service
metadata:
  name: hue-express-service
  namespace: {{ .Values.namespaces.hue }}
spec:
  type: ClusterIP
  selector:
    app: hue-express
  ports:
  - port: 3000
    targetPort: 3000
{{ end }}